[{"uri":"/%E5%9F%BA%E7%A1%80/","title":"基础","tags":[],"description":"","content":"基础 VerilogHDL 是一种硬件描述语言，利用它我们可以描述数字电路。在本阶段，我们会一边学习数字逻辑电路，一边尝试用 Verilog 来实现。\n本阶段所参考的书籍为：Fundamentals of Digital Logic with Verilog Design by Stephen Brown, Zvonko Vranesic\n事不宜迟，开始我们的学习吧。\n"},{"uri":"/%E5%9F%BA%E7%A1%80/1-verilog-basics/","title":"简介","tags":[],"description":"","content":" Verilog 是一种硬件描述语言，可以用来描述数字电路的行为。比如下面这个 Flip-Flop，在时钟的上升沿处，其输出 Q 会等于输入 D。用 Verilog 描述为：\nalways@(posedge clock) Q\u0026lt;=D; "},{"uri":"/%E5%9F%BA%E7%A1%80/1-introduction/","title":"Introduction","tags":[],"description":"","content":"本章会介绍：\n数字硬件的组成 数字电路的设计流程 二进制数字 信息的数字化表示 数字电路的设计流程 D P e r f o M R i t e F e n I D o e i q e n e t t n u i S s y s i i s t i i Y p Y s r p i m g e e T s e h e e a u n s e p s e d c l l i s e d i a c m t c p f d t o p i i p r i e i r l n f r o c s o r e g i o d a i n e m c d u t g c e a u c i n t n t c t o ? t i t i a o n t n s N i ? o o n N o R M e a M d k i e e n s o i c r g o n r e r r e r c o t r i s o ? n s 信息的数字化表示 在数字电路中，通过电平高低来表示 0 和 1，一般 0V 表示 0，1V 表示 1. 下面来看看如何用 0 和 1 表示数字、字母和其他信息。\n二进制数字 在十进制中，每一位数字都表示十的几次方，比如 8547 表示 $8\\times 10^3+5\\times 10^2+4\\times 10^1+7\\times 10^0$，对于任意的十进制数，比如：\n$$ D = d_{n-1}d_{n-2}\\cdots d_1d_0 $$\n都可以表示为：\n$$ V(D)=d_{n-1}\\times 10^{n-1}+d_{n-2}\\times 10^{n-2}+\\cdots d_1\\times 10^1+d_0 \\times 10^0 $$\n因此，十进制是以 10 为底数的数字系统。\n而在数字电路中，由于只能使用 0 和 1，因此必须采用二进制。二进制中的每一位称为 比特（bit），任意二进制数\n$$ B=b_{n-1}b_{n-2}\\cdots b_1b_0 $$\n都可以写成：\n$$ \\begin{align} V(B)\u0026amp;=b_{n-1}\\times 2^{n-1}+b_{n-2}\\times 2^{n-2}+\\cdots b_1\\times 2^1+b_0 \\times 2^0\\ \u0026amp;=\\sum_{i=0}^{n-1} b_i\\times 2^i \\end{align} $$\n比如：$(1101)2=1\\times 2^3 + 1\\times 2^2 + 0\\times 2^1 + 1\\times 2^0=(13){10}$，这里括号的下标表示这是几进制数。\nn bits 的二进制表示 $0$ 到 $2^n-1$ 的数字。\n十进制与二进制的转换 二进制转十进制只需要将其每一位展开为 $b_{n}\\times 2^{n}$（n从0开始）即可（见上面的例子）。十进制转二进制则相反，需要除以 2，考虑一个二进制数：\n$$ \\begin{align} V(B)\u0026amp;=b_{n-1}\\times 2^{n-1}+b_{n-2}\\times 2^{n-2}+\\cdots b_1\\times 2^1+b_0\\ V(B)/2\u0026amp;=b_{n-1}\\times 2^{n-2}+b_{n-2}\\times 2^{n-3}+\\cdots b_1 \u0026amp;\\cdots b_0 \\end{align} $$\n其最低位（Least-Significant Bit, LSB）只可能是 0 或 1，除以 2 后恰好是余数。对商继续除以2，就能得到二进制的每一位数。注意最后得到的数才是最高位（Most-Significant Bit, MSB）。\n示例：\n$$ \\begin{align} (857)_{10}\u0026amp;\\rightarrow (?)_2 \u0026amp;{\\rm Remainder} \u0026amp;\\ 857 \\div 2 \u0026amp;= 428 \u0026amp;1 \u0026amp;;{\\rm LSB}\\ 428 \\div 2 \u0026amp;= 214 \u0026amp;0 \u0026amp;\\ 214 \\div 2 \u0026amp;= 107 \u0026amp;0 \u0026amp;\\ 107 \\div 2 \u0026amp;= 53 \u0026amp;1 \u0026amp;\\ 53 \\div 2 \u0026amp;= 26 \u0026amp;1 \u0026amp;\\ 26 \\div 2 \u0026amp;= 13 \u0026amp;0 \u0026amp;\\ 13 \\div 2 \u0026amp;= 6 \u0026amp;1 \u0026amp;\\ 6 \\div 2 \u0026amp;= 3 \u0026amp;0 \u0026amp;\\ 3 \\div 2 \u0026amp;= 1 \u0026amp;1 \u0026amp;\\ 1 \\div 2 \u0026amp;= 0 \u0026amp;1 \u0026amp;;{\\rm MSB} \\end{align} $$\n$$ (857)_{10} = (1101011001)_2 $$\nASCII 字码 ASCII 使用 7 bits 来表示 128 个字符，但在计算机中一个字节一般是 8 bits，多出来的一位可以设置成 0，或用于校验（如对其余 7 位进行奇偶校验）。\n数字与模拟信信号 二进制数也可以表示模拟信号，通过数模转换电路（DAC），可以将数字转换为相应的电平。反之，通过模数转换电路（ADC），可以将模拟信号转为二进制数。\n"},{"uri":"/%E5%AE%9E%E9%AA%8C/","title":"实验","tags":[],"description":"","content":"章节 1 基础 了解该 Hugo 主题的特点以及背后的核心概念。\n"},{"uri":"/%E5%9F%BA%E7%A1%80/2-introduction-to-logic-circuits/","title":"Introduction to Logic Circuits","tags":[],"description":"","content":"本章会介绍：\n逻辑表达式和电路 布尔运算 逻辑门和简单电路的综合 CAD 和 VerilogHDL 逻辑表达式的化简与卡诺图（Karnaugh maps) 逻辑表达式 考虑一个简单的开关电路\nx S L S 表示这是一个开关，x是外部的输入信号，L表示灯。当 x=0 时，L=0；x=1时，L=1. 所以我们可以写成：\n$$ L(x)=x $$\nx 1 S x S 2 L 只有当 $x_1,x_2$ 同时为 1 时，L 才等于 1. 上面的电路则可以写成：\n$$ L(x_1,x_2)=x_1\\cdot x_2 $$\n符号 $\\cdot$ 称为 与（AND）。\nx S S x 1 2 L 当 $x_1$ 或 $x_2$ 为 1 时，L 为 1. 上面的电路可以写成：\n$$ L(x_1,x_2)=x_1+x_2 $$\n符号 $+$ 称为 或（OR）。\nx S L 当 x=0 时，L 为 1. 上面的电路可以写成：\n$$ L(x)=\\overline{x} $$\n上划线表示 非（NOT），有一些其他表示方法，比如：\n$$ \\overline{x}=x\u0026rsquo;=!x=\\sim x={\\rm NOT}; x $$\n真值表 我们介绍了基本的逻辑表达式，并给出了它们的电路定义，下面我们将给出了它们的真值表：\n$x_1,x_2$ $x_1\\cdot x_2$ $x_1+x_2$ 0 0 0 0 0 1 0 1 1 0 0 1 1 1 1 1 真值表的最左边给出所有的输入组合，而右边则给出逻辑表达式的输出。真值表可以直观地展示出逻辑表达式。真值表会随着输入指数增长，比如当输入有 3 个，则真值表有 8 行。\n$x_1,x_2,x_3$ $x_1\\cdot x_2 \\cdot x_3$ $x_1+x_2+x_3$ 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 0 1 1 0 1 1 0 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 1 1 与和或都可以接受多个输入，与只有在输入都为 1 时才为 1，而或在输入中有一个为 1 时就为 1.\n逻辑门 逻辑表达式在电路中可以通过晶体管/MOS管来实现，这在电路中可以用逻辑门来表示：\n通过组合逻辑门可以得到逻辑电路。\n逻辑电路的分析 例一 对于给定的逻辑电路，我们可以想象给定输入后得到什么输出，比如下面这个电路：$f=\\overline{x}_1+x_1\\cdot x_2$\n其真值表为：\n$x_1, x_2$ $A,B$ $f(x_1,x_2)$ 0 0 1 0 1 0 1 1 0 1 1 0 0 0 0 1 1 0 1 1 其时序图为：\n时序图可以用于在实际电路中，通过逻辑分析仪，来观察其实际工作情况。\n上面的逻辑表达式实际上等价于 $g=\\overline{x}_1+x_2$，它们有相同的真值表。\n例二 考虑下面的逻辑电路：\n$x,y$ L 0 0 0 0 1 1 1 0 1 1 1 0 只有当 x,y 不相同时，输出才为 1。我们把这个称为 异或（XOR），记为 $x \\oplus y$，用下面的逻辑门来表示：\n对异或门取反可以得到 同或（NAND），记为 $x \\odot y$，用下面的逻辑门来表示：\n例三 在上一节我们介绍了二进制数，考虑两个一位的二进制数相加，则可能有四种结果；\n$$ \\begin{array}{r} a\\ +b\\ \\hline s_1s_0 \\end{array} $$\n$a,b$ $s_1s_0$ 0 0 0 0 0 1 0 1 1 0 0 1 1 1 1 0 注意到 $s_0=a\\oplus b$，$s_1=a\\odot b$，所以可以画出如下逻辑电路：\n这个电路称为 半加器。\n布尔代数 George Boole 在 1849 年发表了用代数描述逻辑推理的方法，被后人称为 Boolean Algebra.\n公理 假设有如下公理：\n$0\\cdot 0=0$ $1+1=1$ $1\\cdot 1=1$ $0+0=0$ $0\\cdot 1=1\\cdot 0=0$ $1+0=0+1=1$ If $x=0$, then $\\overline{x}=1$ If $x=1$, then $\\overline{x}=0$ 定理 单变量定理 $x\\cdot 0=0$ $x+1=1$ $x\\cdot 1=0$ $x+0=x$ $x\\cdot x=x$ $x+x=x$ $x\\cdot\\overline{x}=0$ $x+\\overline{x}=1$ $\\overline{\\overline{x}}=x$ 以上定理很容易证明，只需要代入 0 或 1 即可。\n对偶 某个逻辑表达式的 对偶式 可以通过将 与/或 互换，0/1 互换来得到。观察上面的公理和定理，可以发现一些式子是对偶的。比如：\n$$ x+0=x \\leftrightarrow x\\cdot 1=x $$\n如果一个逻辑表达式是正确的，其对偶式也是正确的，它们的结果是一样的。因此，一般有两种方法来表示同一个逻辑表达式，通常其中一种会更简单。\n多变量定理 交换率（Commutative）\n$x\\cdot y = y\\cdot x$ $x+y=y+x$ 结合率（Associative）\n$x\\cdot(y\\cdot z)=(x\\cdot y)\\cdot z$ $x+(y+z)=(x+y)+z$ 分配律（Distributive）\n$x\\cdot(y+z)=x\\cdot y+x\\cdot z$ $x+y\\cdot z=(x+y)\\cdot(x+z)$ 吸收率（Absorption）\n$x+x\\cdot y=x$ $x\\cdot(x+y)=x$ $x\\cdot y+x\\cdot\\overline{y}=x$ $(x+y)\\cdot(x+\\overline{y})=x$ 德·摩根定律（DeMorgan\u0026rsquo;s theorem）\n$\\overline{x\\cdot y}=\\overline{x}+\\overline{y}$ $\\overline{x+y}=\\overline{x}\\cdot\\overline{y}$ $x+\\overline{x}\\cdot y=x+y$ $x\\cdot(\\overline{x}+y)=x\\cdot y$ 共识定理（Consensus）\n$x\\cdot y+y\\cdot z+\\overline{x}\\cdot z=x\\cdot y+\\overline{x}\\cdot z$ $(x+y)\\cdot(y+z)\\cdot(\\overline{x}+z)=(x+y)\\cdot(\\overline{x}+z)$ 例子 证明以下逻辑表达式：\n$$ (x_1+x_2)\\cdot(\\overline{x}+\\overline{x}_2)=x_1\\cdot\\overline{x}_2+\\overline{x}_1\\cdot x_2 $$\n展开等式左边：\n$$ \\begin{align} {\\rm LHS} \u0026amp;= (x_1+x_2)\\cdot\\overline{x}_1+(x_1+x_2)\\cdot\\overline{x}_2\\ \u0026amp;=x_1\\cdot\\overline{x}_1+x_2\\cdot\\overline{x}_1+x_1\\cdot\\overline{x}_2+x_2\\cdot\\overline{x}_2\\ \u0026amp;=0+x_2\\cdot\\overline{x}_1+x_1\\cdot\\overline{x}_2+0\\ \u0026amp;=x_2\\cdot\\overline{x}_1+x_1\\cdot\\overline{x}_2 \\end{align} $$\n韦恩图 韦恩图也可以用于证明逻辑表达式的正确性。这里就不花了，有兴趣的话可以试着证明一下共识定理。\n用与/或/非门综合 有了以上知识，我们可以尝试用与/或/非门得到所希望的逻辑功能。考虑下面的真值表：\n$x_1,x_2$ $f(x_1,x_2)$ 0 0 1 0 1 1 1 0 0 1 1 1 要写出逻辑表达式，我们可以将 $f=1$ 的行相加：\n$$ f(x_1,x_2)=x_1x_2+\\overline{x}_1x_2+\\overline{x}_1\\overline{x}_2 $$\n注：以后我们写逻辑表达式时将省略 $\\cdot$ 号。\n但这样得到的式子并不是最简的。我们可以采取下面的化简方式：\n$$ \\begin{align} f(x_1,x_2) \u0026amp;= x_1x_2 + \\overline{x}_1x_2+ \\overline{x}_1x_2+\\overline{x}_1\\overline{x}_2\\ \u0026amp;=(x_1+\\overline{x}_1)x_2+\\overline{x}_1(\\overline{x}_2+x_2)\\ \u0026amp;=x_2+\\overline{x}_1 \\end{align} $$\n直接用定理化简并不直观，所以后面我们会介绍另一种方法叫“卡诺图”。\n积的和、和的积 下面我们将用专业术语来描述逻辑函数综合的过程。为了方便描述，我们将“与”看作乘，“或”看作除\n最小项 如果一个函数有 $n$ 个变量，则包含这 $n$ 个变量的乘积称为 最小项（Minterm），变量可能是 $x_i$ 或 $\\overline{x}_i$。真值表中的每一行都可以用一个最小项来表示。\n"},{"uri":"/%E5%B7%A5%E5%85%B7/","title":"工具","tags":[],"description":"","content":"笔记工具 Markdeep Diagram Drafting Board\n"},{"uri":"/","title":"Learn Theme for Hugo","tags":[],"description":"","content":"Hugo learn theme Hugo-theme-learn is a theme for Hugo, a fast and modern static website engine written in Go. Where Hugo is often used for blogs, this multilingual-ready theme is fully designed for documentation.\nThis theme is a partial porting of the Learn theme of Grav, a modern flat-file CMS written in PHP.\n"},{"uri":"/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/tags/","title":"Tags","tags":[],"description":"","content":""}]