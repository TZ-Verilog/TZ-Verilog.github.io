<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learn Theme for Hugo on 我的Verilog学习笔记</title><link>/</link><description>Recent content in Learn Theme for Hugo on 我的Verilog学习笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 27 Jul 2022 15:22:52 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>简介</title><link>/%E5%9F%BA%E7%A1%80/1-verilog-basics/</link><pubDate>Fri, 24 Jun 2022 17:25:09 +0800</pubDate><guid>/%E5%9F%BA%E7%A1%80/1-verilog-basics/</guid><description> Verilog 是一种硬件描述语言，可以用来描述数字电路的行为。比如下面这个 Flip-Flop，在时钟的上升沿处，其输出 Q 会等于输入 D。用 Verilog 描述为：
always@(posedge clock) Q&amp;lt;=D;</description></item><item><title>Introduction</title><link>/%E5%9F%BA%E7%A1%80/1-introduction/</link><pubDate>Mon, 18 Jul 2022 11:14:11 +0800</pubDate><guid>/%E5%9F%BA%E7%A1%80/1-introduction/</guid><description>本章会介绍：
数字硬件的组成 数字电路的设计流程 二进制数字 信息的数字化表示 数字电路的设计流程 D P e r f o M R i t e F e n I D o e i q e n e t t n u i S s y s i i s t i i Y p Y s r p i m g e e T s e h e e a u n s e p s e d c l l i s e d i a c m t c p f d t o p i i p r i e i r l n f r o c s o r e g i o d a i n e m c d u t g c e a u c i n t n t c t o ?</description></item><item><title>Introduction to Logic Circuits</title><link>/%E5%9F%BA%E7%A1%80/2-introduction-to-logic-circuits/</link><pubDate>Sun, 24 Jul 2022 12:54:41 +0800</pubDate><guid>/%E5%9F%BA%E7%A1%80/2-introduction-to-logic-circuits/</guid><description>本章会介绍：
逻辑表达式和电路 布尔运算 逻辑门和简单电路的综合 CAD 和 VerilogHDL 逻辑表达式的化简与卡诺图（Karnaugh maps) 逻辑表达式 考虑一个简单的开关电路
x S L S 表示这是一个开关，x是外部的输入信号，L表示灯。当 x=0 时，L=0；x=1时，L=1. 所以我们可以写成：
$$ L(x)=x $$
x 1 S x S 2 L 只有当 $x_1,x_2$ 同时为 1 时，L 才等于 1. 上面的电路则可以写成：
$$ L(x_1,x_2)=x_1\cdot x_2 $$
符号 $\cdot$ 称为 与（AND）。
x S S x 1 2 L 当 $x_1$ 或 $x_2$ 为 1 时，L 为 1. 上面的电路可以写成：
$$ L(x_1,x_2)=x_1+x_2 $$
符号 $+$ 称为 或（OR）。
x S L 当 x=0 时，L 为 1.</description></item><item><title>Strategy for Minimization</title><link>/%E5%9F%BA%E7%A1%80/2.1-strategy-for-minimization/</link><pubDate>Tue, 26 Jul 2022 16:44:38 +0800</pubDate><guid>/%E5%9F%BA%E7%A1%80/2.1-strategy-for-minimization/</guid><description>简化逻辑表达式的策略 下面我们将介绍如何使用卡诺图（karnaugh map）来获得逻辑表达式的最简形式。
术语 Literal: Each appearance of a variable in a product term, either uncomplemented or complemented, is called a literal.（即乘积中的变量） Implicant: A product term that indicates the input valuation(s) for which a given function is equal to 1 is called an implicant of the function.（即某个乘积为 1 时，$f=1$，则这个乘积就是 implicant） Prime Implicant: An implicant is called a prime implicant if it cannot be combined into another implicant that has fewer literals.</description></item><item><title>Number Representation and Arithmetic Circuits</title><link>/%E5%9F%BA%E7%A1%80/3-number-and-arithmetic/</link><pubDate>Wed, 27 Jul 2022 15:22:52 +0800</pubDate><guid>/%E5%9F%BA%E7%A1%80/3-number-and-arithmetic/</guid><description/></item></channel></rss>